<?xml version="1.0"?>
<page path="doc" short-title="Docs">
      <div class="row">
        <div class="col-lg-12">
          <h1><a id="documentation"></a>Documentation</h1>
          <h2>CLI - Sub Commands and Options</h2>

          <table class="table table-striped table-bordered">
            <tr><td>Command</td><td>Option</td><td>Since</td><td>Example</td><td>Description</td></tr>
            <tr><td>(all)</td><td>-v</td><td>0.1</td><td></td><td>Be verbose, increase logging output.</td></tr>
            <tr><td>migrate</td><td></td><td>0.1</td><td>mechanic migrate</td><td>Apply pending migrations.</td></tr>
            <tr><td></td><td></td><td>0.1</td><td>mechanic -v migrate -- /entrypoint.sh param=value</td><td>Execute follow up command if all migrations have been successfully applied.</td></tr>
            <tr><td>list-migrations</td><td></td><td>0.1</td><td>mechanic list-migrations</td><td>List migrations with status as if recorded in internal database.</td></tr>
            <tr><td></td><td>--order-by=id|start_date</td><td>0.1</td><td>mechanic list-migrations --order-by=id</td><td>Specify order for migrations list.<br/> If unspecified, order is by start_date.</td></tr>
            <tr><td>help</td><td></td><td>0.1</td><td>mechanic help</td><td>Print sub commands and options.</td></tr>
            <tr><td>version</td><td></td><td>0.1</td><td>mechanic version</td><td>Print version information.</td></tr>
          </table>

          <h3>Environment Variables</h3>
          <table class="table table-striped table-bordered">
            <tr><td>Environment Variable</td><td>Since</td><td>Example</td><td>Description</td></tr>
            <tr><td>MECHANIC_ROOT_DIR</td><td>0.1</td><td>/home/developer/test-dir</td><td>Root directory for execution. This is mainly used for integration testing.</td></tr>
          </table> 
        </div>
      </div>

      <div class="row">
        <div class="col-lg-12">
          <h2>The Configuration - /etc/mechanic.conf</h2>
          <code>
# /etc/mechanic.conf
[main]
log_file=/mechanic.volume/log/mechanic.log
pre_migration_dirs=/var/lib/mechanic/pre-migration.d/
migration_dirs=/var/lib/mechanic/migration.d/
post_migration_dirs=/var/lib/mechanic/post-migration.d/
run_dir=/mechanic.volume/tmp/
state_dir=/mechanic.volume/state
          </code>

          <h3>Configuration Options</h3>
          <table class="table table-striped table-bordered">
            <tr><td>Option</td><td>Since</td><td>Default</td><td>Example</td><td>Description</td></tr>
            <tr><td>log_file</td><td>0.1</td><td>${MECHANIC_ROOT_DIR}/var/log/mechanic.log</td><td>/var/log/mechanic.log<br/>/dev/stderr</td><td>File mechanic writes log messages to.</td></tr>
            <tr><td>pre_migration_dirs</td><td>0.4</td><td>${MECHANIC_ROOT_DIR}/etc/mechanic/pre-migration.d/: \<br/>${MECHANIC_ROOT_DIR}/var/lib/mechanic/pre-migration.d</td><td></td><td>Colon seperated list of pathes mechanic collects pre migration scripts from.</td></tr>
            <tr><td>migration_dirs</td><td>0.1</td><td>${MECHANIC_ROOT_DIR}/etc/mechanic/migration.d/: \<br/>${MECHANIC_ROOT_DIR}/var/lib/mechanic/migration.d</td><td></td><td>Colon seperated list of pathes mechanic collects the migration scripts from.</td></tr>
            <tr><td>post_migration_dirs</td><td>0.4</td><td>${MECHANIC_ROOT_DIR}/etc/mechanic/post-migration.d/: \<br/>${MECHANIC_ROOT_DIR}/var/lib/mechanic/post-migration.d</td><td></td><td>Colon seperated list of pathes mechanic collects post migration scripts from.</td></tr>
            <tr><td>run_dir</td><td>0.4</td><td>${MECHANIC_ROOT_DIR}/var/lib/mechanic/tmp</td><td>/var/lib/mechanic/tmp<br/>/tmp</td><td>Location for migration execution directories.<br/>When a migration failed diagnostic data can be found here. (So /tmp is a moderate choice.)</td></tr>
            <tr><td>state_dir</td><td>0.1</td><td>${MECHANIC_ROOT_DIR}/var/lib/mechanic/state</td><td></td><td>Location where Server Mechanic stores the migration state. Currently the migration state is stored in a sqlite database named inventory.db below this directory.</td></tr>
          </table>

        </div>
      </div>
<!--
<p>* Docs
  * Usage Scenarios
    * Server or Virtual Machine
    * Docker container
  * [Installation](https://github.com/server-mechanic/me
chanic/blob/master/doc/INSTALLATION.md)
  * [How it Works](https://github.com/server-mechani
c/mechanic/blob/master/doc/HOWITWORKS.md)
  * Advanced
    * Pre-Migrations, Post-Migrations
  * Distribution-Options
    * Migrations in git, start manually
    * mechanic triggered by event via mechanicd
</p>
-->
      <div class="row">
        <div class="col-lg-12">
          <h1><a id="development"></a>Development</h1>
          <p>Server Mechanic is written in python. (Early versions where based on Go, C and C++.)</p>
          <p>Unit tests are written with the python mock lib. (Everything testable <i>should</i> be tested via a unit test.)</p>
          <p>Integration tests are currently based on a set of custom shell scripts performing the following steps to verify several scenarios (There is a real chance that we switch to docker containers in the near future - for now the setup is sufficient.):</p>
          <ul>
            <li>Setup a test scenario based on files in a temporary folder.</li>
            <li>Run the mechanic in this temporary folder utilizing MECHANIC_ROOT_DIR to change mechanic root.</li>
            <li>Then exit code, contents of the test file system, the internal state of the mechanic database are merged into an output listing.</li>
            <li>The output listing is compared to the expected output.</li>
          </ul>

          <h2>Prerequesites</h2>
          <h3>Install system packages</h3>
          <code># RedHat/ CentOS/ Fedora
yum -y install python sqlite sqlite-devel make git
# Debian/ Ubuntu
apt-get install -y python2.7 sqlite3 sqlite3-dev make</code>

          <h3>Install python packages</h3>
          <code>pip install mock coverage</code>

          <h3>Install docker</h3>
          <p>For docker installation refer to <a target="_blank" href="https://docs.docker.com/engine/installation/linux/">docker installation instructions</a>.</p>

          <h3>Build the project</h3>
          <p>This is the make target you probably will use for development.</p>
          <ul><li>Precompiles the python code</li>
          <li>runs unit tests</li>
          <li>runs integration tests.</li>
          </ul>
          <code>make</code>
          <p>or</p>
          <code>make default</code>

          <h3>Build all</h3>
          <ul><li>Precompiles the python code</li>
          <li>runs unit tests</li>
          <li>runs integration tests</li>
          <li>generates coverage report</li>
          <li>build installation packages.</li>
          </ul>
          <code>make all</code>
        </div>
      </div>
</page>
